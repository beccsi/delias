{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Delias:\
\
Das Plugin wird im Paket *.interaction \'fcber den Activator.java gestartet\
\
Es wird eine Instanz vom InteractionHistoryHandler erzeugt. \
\
Der InteractionHistoryHandler initialisiert alle Listener und f\'fcgt sie den SWT Events hinzu (in der Methode capture() )\
\
Das Monitoring der Events wird gestartet mit dem Aufruf 
\i startInteractionSequence\
\

\i0 Die Verarbeitung der Events findet in der InteractionHistory.java statt. -> Im Konstruktor wird ein Stack und eine Liste f\'fcr die Events erzeugt. Der Stack speichert tempor\'e4r um die Hierarchie zu verfolgen und die eigentlich aufgenommenen Events die Dauerhaft in der History bleiben kommen in die Liste.\
\
Alle Sensoren erben vom AbstractListener im commons Paket. Die Actions sind generisch angelegt und erben von AbstractAction. Diese wiederum implementieren das IAction Interface (ich habe alle Interfaces mit I vorneweg benannt).\
\
Die einzelnen Methoden um den Text einer Action usw. zu bekommen sind entweder generisch oder in den Actions selber definiert. \
\
Die Pakete *xml und *rdf sollten f\'fcr den Import sein, dar\'fcber k\'f6nnen wir gerne reden wenn Du auch an die Evaluation kommst. \
\
*visualisation macht alles mit der Ausgabe\
\
*utils sind hilfsfunktionen \
\
\
\
}